// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: internal/idl/shardctlrer.proto

package shardctrlersvc

import (
	"context"
	
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShardctrlerClient is the client API for Shardctrler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShardctrlerClient interface {
	Join(ctx context.Context, in *JoinArgs, opts ...grpc.CallOption) (*JoinReply, error)
	Leave(ctx context.Context, in *LeaveArgs, opts ...grpc.CallOption) (*LeaveReply, error)
	Move(ctx context.Context, in *MoveArgs, opts ...grpc.CallOption) (*MoveReply, error)
	Query(ctx context.Context, in *QueryArgs, opts ...grpc.CallOption) (*QueryReply, error)
}

type shardctrlerClient struct {
	cc grpc.ClientConnInterface
}

func NewShardctrlerClient(cc grpc.ClientConnInterface) ShardctrlerClient {
	return &shardctrlerClient{cc}
}

func (c *shardctrlerClient) Join(ctx context.Context, in *JoinArgs, opts ...grpc.CallOption) (*JoinReply, error) {
	out := new(JoinReply)
	err := c.cc.Invoke(ctx, "/shardctrlersvc.Shardctrler/Join", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shardctrlerClient) Leave(ctx context.Context, in *LeaveArgs, opts ...grpc.CallOption) (*LeaveReply, error) {
	out := new(LeaveReply)
	err := c.cc.Invoke(ctx, "/shardctrlersvc.Shardctrler/Leave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shardctrlerClient) Move(ctx context.Context, in *MoveArgs, opts ...grpc.CallOption) (*MoveReply, error) {
	out := new(MoveReply)
	err := c.cc.Invoke(ctx, "/shardctrlersvc.Shardctrler/Move", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shardctrlerClient) Query(ctx context.Context, in *QueryArgs, opts ...grpc.CallOption) (*QueryReply, error) {
	out := new(QueryReply)
	err := c.cc.Invoke(ctx, "/shardctrlersvc.Shardctrler/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShardctrlerServer is the server API for Shardctrler service.
// All implementations must embed UnimplementedShardctrlerServer
// for forward compatibility
type ShardctrlerServer interface {
	Join(context.Context, *JoinArgs) (*JoinReply, error)
	Leave(context.Context, *LeaveArgs) (*LeaveReply, error)
	Move(context.Context, *MoveArgs) (*MoveReply, error)
	Query(context.Context, *QueryArgs) (*QueryReply, error)
	mustEmbedUnimplementedShardctrlerServer()
}

// UnimplementedShardctrlerServer must be embedded to have forward compatible implementations.
type UnimplementedShardctrlerServer struct {
}

func (UnimplementedShardctrlerServer) Join(context.Context, *JoinArgs) (*JoinReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedShardctrlerServer) Leave(context.Context, *LeaveArgs) (*LeaveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Leave not implemented")
}
func (UnimplementedShardctrlerServer) Move(context.Context, *MoveArgs) (*MoveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Move not implemented")
}
func (UnimplementedShardctrlerServer) Query(context.Context, *QueryArgs) (*QueryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedShardctrlerServer) mustEmbedUnimplementedShardctrlerServer() {}

// UnsafeShardctrlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShardctrlerServer will
// result in compilation errors.
type UnsafeShardctrlerServer interface {
	mustEmbedUnimplementedShardctrlerServer()
}

func RegisterShardctrlerServer(s grpc.ServiceRegistrar, srv ShardctrlerServer) {
	s.RegisterService(&Shardctrler_ServiceDesc, srv)
}

func _Shardctrler_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShardctrlerServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shardctrlersvc.Shardctrler/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShardctrlerServer).Join(ctx, req.(*JoinArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shardctrler_Leave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShardctrlerServer).Leave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shardctrlersvc.Shardctrler/Leave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShardctrlerServer).Leave(ctx, req.(*LeaveArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shardctrler_Move_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShardctrlerServer).Move(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shardctrlersvc.Shardctrler/Move",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShardctrlerServer).Move(ctx, req.(*MoveArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shardctrler_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShardctrlerServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shardctrlersvc.Shardctrler/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShardctrlerServer).Query(ctx, req.(*QueryArgs))
	}
	return interceptor(ctx, in, info, handler)
}

// Shardctrler_ServiceDesc is the grpc.ServiceDesc for Shardctrler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Shardctrler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shardctrlersvc.Shardctrler",
	HandlerType: (*ShardctrlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Join",
			Handler:    _Shardctrler_Join_Handler,
		},
		{
			MethodName: "Leave",
			Handler:    _Shardctrler_Leave_Handler,
		},
		{
			MethodName: "Move",
			Handler:    _Shardctrler_Move_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _Shardctrler_Query_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/idl/shardctlrer.proto",
}
