// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: rpc/idl/shardkv.proto

package shardkvsvc

import (
	"context"
	
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShardKVClient is the client API for ShardKV service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShardKVClient interface {
	Get(ctx context.Context, in *GetArgs, opts ...grpc.CallOption) (*GetReply, error)
	PutAppend(ctx context.Context, in *PutAppendArgs, opts ...grpc.CallOption) (*PutAppendReply, error)
	AddShard(ctx context.Context, in *SendShardArg, opts ...grpc.CallOption) (*SendShardReply, error)
}

type shardKVClient struct {
	cc grpc.ClientConnInterface
}

func NewShardKVClient(cc grpc.ClientConnInterface) ShardKVClient {
	return &shardKVClient{cc}
}

func (c *shardKVClient) Get(ctx context.Context, in *GetArgs, opts ...grpc.CallOption) (*GetReply, error) {
	out := new(GetReply)
	err := c.cc.Invoke(ctx, "/shardkvsvc.ShardKV/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shardKVClient) PutAppend(ctx context.Context, in *PutAppendArgs, opts ...grpc.CallOption) (*PutAppendReply, error) {
	out := new(PutAppendReply)
	err := c.cc.Invoke(ctx, "/shardkvsvc.ShardKV/PutAppend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shardKVClient) AddShard(ctx context.Context, in *SendShardArg, opts ...grpc.CallOption) (*SendShardReply, error) {
	out := new(SendShardReply)
	err := c.cc.Invoke(ctx, "/shardkvsvc.ShardKV/AddShard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShardKVServer is the server API for ShardKV service.
// All implementations must embed UnimplementedShardKVServer
// for forward compatibility
type ShardKVServer interface {
	Get(context.Context, *GetArgs) (*GetReply, error)
	PutAppend(context.Context, *PutAppendArgs) (*PutAppendReply, error)
	AddShard(context.Context, *SendShardArg) (*SendShardReply, error)
	mustEmbedUnimplementedShardKVServer()
}

// UnimplementedShardKVServer must be embedded to have forward compatible implementations.
type UnimplementedShardKVServer struct {
}

func (UnimplementedShardKVServer) Get(context.Context, *GetArgs) (*GetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedShardKVServer) PutAppend(context.Context, *PutAppendArgs) (*PutAppendReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutAppend not implemented")
}
func (UnimplementedShardKVServer) AddShard(context.Context, *SendShardArg) (*SendShardReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddShard not implemented")
}
func (UnimplementedShardKVServer) mustEmbedUnimplementedShardKVServer() {}

// UnsafeShardKVServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShardKVServer will
// result in compilation errors.
type UnsafeShardKVServer interface {
	mustEmbedUnimplementedShardKVServer()
}

func RegisterShardKVServer(s grpc.ServiceRegistrar, srv ShardKVServer) {
	s.RegisterService(&ShardKV_ServiceDesc, srv)
}

func _ShardKV_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShardKVServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shardkvsvc.ShardKV/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShardKVServer).Get(ctx, req.(*GetArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShardKV_PutAppend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutAppendArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShardKVServer).PutAppend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shardkvsvc.ShardKV/PutAppend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShardKVServer).PutAppend(ctx, req.(*PutAppendArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShardKV_AddShard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendShardArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShardKVServer).AddShard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shardkvsvc.ShardKV/AddShard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShardKVServer).AddShard(ctx, req.(*SendShardArg))
	}
	return interceptor(ctx, in, info, handler)
}

// ShardKV_ServiceDesc is the grpc.ServiceDesc for ShardKV service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShardKV_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shardkvsvc.ShardKV",
	HandlerType: (*ShardKVServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _ShardKV_Get_Handler,
		},
		{
			MethodName: "PutAppend",
			Handler:    _ShardKV_PutAppend_Handler,
		},
		{
			MethodName: "AddShard",
			Handler:    _ShardKV_AddShard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/idl/shardkv.proto",
}
